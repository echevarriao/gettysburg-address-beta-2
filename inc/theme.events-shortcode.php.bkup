<?php

add_shortcode('display_dept_events', 'display_depts_events_sc');

function display_depts_events_sc($atts, $content = ''){

	$defaults = array('post_type' => 'bme-events', 'order' => 'ASC', 'posts_per_page' => 5);
	$inf = array();
	$depts = null;
	$data = "";
	$obj = array();
	$argv = array();

	$inf = shortcode_atts($defaults, $atts);

	$argv = array(
		'post_type' => $inf['post_type'], 
		'post_status' => array('publish'),
		'posts_per_page' => $inf['posts_per_page'],
		'meta_key' => 'biomedical_engineering_events_date-of-event',
		'orderby' => 'meta_value',
		'order' => $inf['order'],
		'meta_value' => date('Y-m-d'),
		'meta_compare' => '>=',
		);

	$depts = new WP_Query($argv);

	if($depts->have_posts()) {

	$data .= "<div class=\"grid-container\">\n
  <div class=\"grid-x grid-margin-x small-up-2 medium-up-3 large-up-5\">\n";

	while($depts->have_posts()) {

	$depts->the_post();

	$obj['start-time'] = get_post_meta(get_the_ID(), 'biomedical_engineering_events_start-time', true);
	$obj['end-time'] = get_post_meta(get_the_ID(), 'biomedical_engineering_events_end-time', true);
	$obj['excerpt'] = get_post_meta(get_the_ID(), 'biomedical_engineering_events_event-excerpt', true);
	$obj['desc'] = get_post_meta(get_the_ID(), 'biomedical_engineering_events_event-description', true);
	$obj['location'] = get_post_meta(get_the_ID(), 'biomedical_engineering_events_location', true);
	$obj['flyer'] = get_post_meta(get_the_ID(), 'biomedical_engineering_events_event-flyer', true);
	$obj['icon'] = get_post_meta(get_the_ID(), 'biomedical_engineering_events_event-icon', true);
	$obj['date'] = get_post_meta(get_the_ID(), 'biomedical_engineering_events_date-of-event', true);

	$data .= "<div class = \"cell\">
	<div class=\"card\">\n
	  <div class=\"card-divider\">\n
    		<h4>" . date("M d", strtotime($obj['date'])) . "</h4>\n
	  </div>\n
	  <div class=\"card-section\">\n
    		<p><strong><a href = \"" . get_the_permalink() . "\">" . get_the_title() . "</a></strong></p>\n
	  </div>\n
	</div>\n
<hr />\n
<p><span class = \"start-time\">" . date("h:i A", strtotime($obj['start-time'])) . "</span></p>\n
</div>\n";

	}

	$data .= "</div>\n
</div>\n";

	} else {

	$data = "<p><b>There are no events available.</b></p>";

	}

	wp_reset_postdata();

	return $data;

}

/**
 * Generated by the WordPress Meta Box Generator at http://goo.gl/8nwllb
 */


class Rational_Meta_Box {
	private $screens = array(
		'bme-events',
	);
	private $fields = array(
		array(
			'id' => 'date-of-event',
			'label' => 'Date of Event',
			'type' => 'date',
		),
		array(
			'id' => 'start-time',
			'label' => 'Start Time',
			'type' => 'time',
		),
		array(
			'id' => 'end-time',
			'label' => 'End Time',
			'type' => 'time',
		),
		array(
			'id' => 'event-excerpt',
			'label' => 'Event Excerpt',
			'type' => 'text',
		),
		array(
			'id' => 'event-description',
			'label' => 'Event Description',
			'type' => 'textarea',
		),
		array(
			'id' => 'location',
			'label' => 'Location',
			'type' => 'text',
		),
		array(
			'id' => 'event-icon',
			'label' => 'Event Icon',
			'type' => 'media',
		),
		array(
			'id' => 'event-flyer',
			'label' => 'Event Flyer',
			'type' => 'media',
		),
	);

	/**
	 * Class construct method. Adds actions to their respective WordPress hooks.
	 */
	public function __construct() {
		add_action( 'add_meta_boxes', array( $this, 'add_meta_boxes' ) );
		add_action( 'admin_footer', array( $this, 'admin_footer' ) );
		add_action( 'save_post', array( $this, 'save_post' ) );
	}

	/**
	 * Hooks into WordPress' add_meta_boxes function.
	 * Goes through screens (post types) and adds the meta box.
	 */
	public function add_meta_boxes() {
		foreach ( $this->screens as $screen ) {
			add_meta_box(
				'biomedical-engineering-events',
				__( 'Biomedical Engineering Events', 'bmeweb' ),
				array( $this, 'add_meta_box_callback' ),
				$screen,
				'advanced',
				'high'
			);
		}
	}

	/**
	 * Generates the HTML for the meta box
	 * 
	 * @param object $post WordPress post object
	 */
	public function add_meta_box_callback( $post ) {
		wp_nonce_field( 'biomedical_engineering_events_data', 'biomedical_engineering_events_nonce' );
		$this->generate_fields( $post );
	}

	/**
	 * Hooks into WordPress' admin_footer function.
	 * Adds scripts for media uploader.
	 */
	public function admin_footer() {
		?><script>
			// https://codestag.com/how-to-use-wordpress-3-5-media-uploader-in-theme-options/
			jQuery(document).ready(function($){
				if ( typeof wp.media !== 'undefined' ) {
					var _custom_media = true,
					_orig_send_attachment = wp.media.editor.send.attachment;
					$('.rational-metabox-media').click(function(e) {
						var send_attachment_bkp = wp.media.editor.send.attachment;
						var button = $(this);
						var id = button.attr('id').replace('_button', '');
						_custom_media = true;
							wp.media.editor.send.attachment = function(props, attachment){
							if ( _custom_media ) {
								$("#"+id).val(attachment.url);
							} else {
								return _orig_send_attachment.apply( this, [props, attachment] );
							};
						}
						wp.media.editor.open(button);
						return false;
					});
					$('.add_media').on('click', function(){
						_custom_media = false;
					});
				}
			});
		</script><?php
	}

	/**
	 * Generates the field's HTML for the meta box.
	 */
	public function generate_fields( $post ) {
		$output = '';
		foreach ( $this->fields as $field ) {
			$label = '<label for="' . $field['id'] . '">' . $field['label'] . '</label>';
			$db_value = get_post_meta( $post->ID, 'biomedical_engineering_events_' . $field['id'], true );
			switch ( $field['type'] ) {
				case 'media':
					$input = sprintf(
						'<input class="regular-text" id="%s" name="%s" type="text" value="%s"> <input class="button rational-metabox-media" id="%s_button" name="%s_button" type="button" value="Upload" />',
						$field['id'],
						$field['id'],
						$db_value,
						$field['id'],
						$field['id']
					);
					break;
				case 'textarea':
					$input = sprintf(
						'<textarea class="large-text" id="%s" name="%s" rows="5">%s</textarea>',
						$field['id'],
						$field['id'],
						$db_value
					);
					break;
				default:
					$input = sprintf(
						'<input %s id="%s" name="%s" type="%s" value="%s">',
						$field['type'] !== 'color' ? 'class="regular-text"' : '',
						$field['id'],
						$field['id'],
						$field['type'],
						$db_value
					);
			}
			$output .= $this->row_format( $label, $input );
		}
		echo '<table class="form-table"><tbody>' . $output . '</tbody></table>';
	}

	/**
	 * Generates the HTML for table rows.
	 */
	public function row_format( $label, $input ) {
		return sprintf(
			'<tr><th scope="row">%s</th><td>%s</td></tr>',
			$label,
			$input
		);
	}
	/**
	 * Hooks into WordPress' save_post function
	 */
	public function save_post( $post_id ) {
		if ( ! isset( $_POST['biomedical_engineering_events_nonce'] ) )
			return $post_id;

		$nonce = $_POST['biomedical_engineering_events_nonce'];
		if ( !wp_verify_nonce( $nonce, 'biomedical_engineering_events_data' ) )
			return $post_id;

		if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE )
			return $post_id;

		foreach ( $this->fields as $field ) {
			if ( isset( $_POST[ $field['id'] ] ) ) {
				switch ( $field['type'] ) {
					case 'email':
						$_POST[ $field['id'] ] = sanitize_email( $_POST[ $field['id'] ] );
						break;
					case 'text':
						$_POST[ $field['id'] ] = sanitize_text_field( $_POST[ $field['id'] ] );
						break;
				}
				update_post_meta( $post_id, 'biomedical_engineering_events_' . $field['id'], $_POST[ $field['id'] ] );
			} else if ( $field['type'] === 'checkbox' ) {
				update_post_meta( $post_id, 'biomedical_engineering_events_' . $field['id'], '0' );
			}
		}
	}
}
new Rational_Meta_Box;
